Pseudocode for DNA to Protein Translation

amino = {
  Amino acid dictionary with codon for keys and amino acid for value.
  Start codons will be denoted with '?'
  Stop codons denoted with '!'
}

General function that converts codon to protein:

def protein(parameters include DNA sequence and a reading frame):

  for base in range with increments of 3:
      codon = sequence[base:base+3]
      "reading frame".append(amino acid from dictionary using codon)

Function that converts DNA to protein for every reading frame:

def dna_to_protein(sequence):

  seq = converting sequence from list to a string

  rf1 = list for first reading frame
  rf2 = list for second reading frame
  rf3 = list for third reading frame

  if the length of seq has a remainder of 0 when divided by 3:
    We can call the protein function 3 times, once for each reading frame.
    First frame: start at index 0, end at end of sequence
    Second frame: start at 1, end 2 bases short of sequence to prevent a 2 base overhang
    Third frame: start at 2, end at 1 short of end of sequence

  elif the length of seq has a remainder of 1 when divided by 3:

    First frame: start at index 0, end at 1 before end of sequence
    Second frame: start at 1, end at end of sequence
    Third frame: start at 2, end at 2 short of end of sequence

  elif the length of seq has a remainder of 2 when divided by 3:

    First frame: start at index 0, end at 2 short of end of sequence
    Second frame: start at 1, end at 1 short of end of sequence
    Third frame: start at 2, end at end of sequence

  else:
    Throw an error.

  Convert all reading frame protein lists to strings.

  return all three reading frame protein strings

# General function for finding double basic putative sites

def double_basic(takes in reading frame):

    location <- -1

    for amino acid in range from 0 to length of frame:
      location += 1
      site = frame[amino acid at this location and the one to the right of it ]
      if site == KK or KR or RK or RR:
          Output amino acid pair and location to fasta file

# Function to identify clevage sites in every reading frame

def clevage_sites(frames):
    unpacks frames and puts them into 3 variables, f1, f2 and f3

    Outputs first reading frame to protein sequence to output_file
    call double_basic with first reading frame as argument
        (note: this outputs the identified double basic sites and locations)

    Outputs second reading frame to protein sequence to output_file
    call double_basic with second reading frame as argument

    Outputs third reading frame to protein sequence to output_file
    call double_basic with third reading frame as argument


# output file

Create an output file

Write output file by placing sequence info first, followed by translated sequence, followed by descriptions of double basic site locations.
